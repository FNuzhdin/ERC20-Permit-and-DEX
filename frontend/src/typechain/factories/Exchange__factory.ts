/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Exchange, ExchangeInterface } from "../Exchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Sell",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "divisor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "sellWithPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_divisor",
        type: "uint256",
      },
    ],
    name: "setPriceDivisor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "topUp",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040526001805534801561001457600080fd5b5060405161146838038061146883398181016040528101906100369190610113565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b6080516112f861017060003960008181610285015281816106490152818161076a015261084701526112f86000f3fe6080604052600436106100745760003560e01c80638da5cb5b1161004e5780638da5cb5b146100f3578063b2861e7b1461011e578063d96a094a14610147578063dc29f1de1461016357610083565b806317cd2129146100885780631f2dc5ef146100b15780633ccfd60b146100dc57610083565b366100835761008161016d565b005b600080fd5b34801561009457600080fd5b506100af60048036038101906100aa9190610ab2565b6101fd565b005b3480156100bd57600080fd5b506100c6610369565b6040516100d39190610b63565b60405180910390f35b3480156100e857600080fd5b506100f161036f565b005b3480156100ff57600080fd5b506101086104ef565b6040516101159190610b8d565b60405180910390f35b34801561012a57600080fd5b5061014560048036038101906101409190610ba8565b610513565b005b610161600480360381019061015c9190610ba8565b6105ee565b005b61016b61016d565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f290610c32565b60405180910390fd5b565b60015485101561020c57600080fd5b60006001548661021c9190610c81565b90506000818761022c9190610ce1565b9050600047905081600154826102429190610d15565b1015610283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90610da3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d505accf8b8b8b8b8b8b8b6040518863ffffffff1660e01b81526004016102e89796959493929190610de1565b600060405180830381600087803b15801561030257600080fd5b505af1158015610316573d6000803e3d6000fd5b505050506103248a83610845565b7f5e5e995ce3133561afceaa51a9a154d5db228cd7525d34df5185582c18d3df098a83604051610355929190610e50565b60405180910390a150505050505050505050565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490610c32565b60405180910390fd5b60004711610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790610ec5565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161046690610f16565b60006040518083038185875af1925050503d80600081146104a3576040519150601f19603f3d011682016040523d82523d6000602084013e6104a8565b606091505b50509050806104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e390610f77565b60405180910390fd5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059890610c32565b60405180910390fd5b600081036105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90610fe3565b60405180910390fd5b8060018190555050565b600154811015610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a9061104f565b60405180910390fd5b600060015482610643919061106f565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106a09190610b8d565b602060405180830381865afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e191906110b5565b905082811015610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071d9061112e565b60405180910390fd5b813414610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075f9061119a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107c3929190610e50565b6020604051808303816000875af11580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080691906111f2565b507fe3d4187f6ca4248660cc0ac8b8056515bac4a8132be2eca31d6d0cc170722a7e3384604051610838929190610e50565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b81526004016108a29392919061121f565b6020604051808303816000875af11580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e591906111f2565b506000600154826108f6919061106f565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161091e90610f16565b60006040518083038185875af1925050503d806000811461095b576040519150601f19603f3d011682016040523d82523d6000602084013e610960565b606091505b50509050806109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b906112a2565b60405180910390fd5b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109da826109af565b9050919050565b6109ea816109cf565b81146109f557600080fd5b50565b600081359050610a07816109e1565b92915050565b6000819050919050565b610a2081610a0d565b8114610a2b57600080fd5b50565b600081359050610a3d81610a17565b92915050565b600060ff82169050919050565b610a5981610a43565b8114610a6457600080fd5b50565b600081359050610a7681610a50565b92915050565b6000819050919050565b610a8f81610a7c565b8114610a9a57600080fd5b50565b600081359050610aac81610a86565b92915050565b600080600080600080600060e0888a031215610ad157610ad06109aa565b5b6000610adf8a828b016109f8565b9750506020610af08a828b016109f8565b9650506040610b018a828b01610a2e565b9550506060610b128a828b01610a2e565b9450506080610b238a828b01610a67565b93505060a0610b348a828b01610a9d565b92505060c0610b458a828b01610a9d565b91505092959891949750929550565b610b5d81610a0d565b82525050565b6000602082019050610b786000830184610b54565b92915050565b610b87816109cf565b82525050565b6000602082019050610ba26000830184610b7e565b92915050565b600060208284031215610bbe57610bbd6109aa565b5b6000610bcc84828501610a2e565b91505092915050565b600082825260208201905092915050565b7f4e6f7420616e206f776e65720000000000000000000000000000000000000000600082015250565b6000610c1c600c83610bd5565b9150610c2782610be6565b602082019050919050565b60006020820190508181036000830152610c4b81610c0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c8c82610a0d565b9150610c9783610a0d565b925082610ca757610ca6610c52565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cec82610a0d565b9150610cf783610a0d565b9250828203905081811115610d0f57610d0e610cb2565b5b92915050565b6000610d2082610a0d565b9150610d2b83610a0d565b9250828202610d3981610a0d565b91508282048414831517610d5057610d4f610cb2565b5b5092915050565b7f45786368616e676520686176656e27742066756e647300000000000000000000600082015250565b6000610d8d601683610bd5565b9150610d9882610d57565b602082019050919050565b60006020820190508181036000830152610dbc81610d80565b9050919050565b610dcc81610a43565b82525050565b610ddb81610a7c565b82525050565b600060e082019050610df6600083018a610b7e565b610e036020830189610b7e565b610e106040830188610b54565b610e1d6060830187610b54565b610e2a6080830186610dc3565b610e3760a0830185610dd2565b610e4460c0830184610dd2565b98975050505050505050565b6000604082019050610e656000830185610b7e565b610e726020830184610b54565b9392505050565b7f4e6f2066756e6473000000000000000000000000000000000000000000000000600082015250565b6000610eaf600883610bd5565b9150610eba82610e79565b602082019050919050565b60006020820190508181036000830152610ede81610ea2565b9050919050565b600081905092915050565b50565b6000610f00600083610ee5565b9150610f0b82610ef0565b600082019050919050565b6000610f2182610ef3565b9150819050919050565b7f5478206661696c65640000000000000000000000000000000000000000000000600082015250565b6000610f61600983610bd5565b9150610f6c82610f2b565b602082019050919050565b60006020820190508181036000830152610f9081610f54565b9050919050565b7f496e636f7272656374206e756d62657200000000000000000000000000000000600082015250565b6000610fcd601083610bd5565b9150610fd882610f97565b602082019050919050565b60006020820190508181036000830152610ffc81610fc0565b9050919050565b7f416d6f756e7420697320746f6f206c6f77000000000000000000000000000000600082015250565b6000611039601183610bd5565b915061104482611003565b602082019050919050565b600060208201905081810360008301526110688161102c565b9050919050565b600061107a82610a0d565b915061108583610a0d565b92508261109557611094610c52565b5b828204905092915050565b6000815190506110af81610a17565b92915050565b6000602082840312156110cb576110ca6109aa565b5b60006110d9848285016110a0565b91505092915050565b7f4e6f2070726f6475637400000000000000000000000000000000000000000000600082015250565b6000611118600a83610bd5565b9150611123826110e2565b602082019050919050565b600060208201905081810360008301526111478161110b565b9050919050565b7f496e636f72726563742076616c75650000000000000000000000000000000000600082015250565b6000611184600f83610bd5565b915061118f8261114e565b602082019050919050565b600060208201905081810360008301526111b381611177565b9050919050565b60008115159050919050565b6111cf816111ba565b81146111da57600080fd5b50565b6000815190506111ec816111c6565b92915050565b600060208284031215611208576112076109aa565b5b6000611216848285016111dd565b91505092915050565b60006060820190506112346000830186610b7e565b6112416020830185610b7e565b61124e6040830184610b54565b949350505050565b7f43616e27742073656e6400000000000000000000000000000000000000000000600082015250565b600061128c600a83610bd5565b915061129782611256565b602082019050919050565b600060208201905081810360008301526112bb8161127f565b905091905056fea26469706673582212206af74ce5a391abf98dfd6040c9871d0865e3e30d11d8eef505bd64e8c2592d1664736f6c634300081c0033";

type ExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exchange__factory extends ContractFactory {
  constructor(...args: ExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override deploy(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_token, overrides || {}) as Promise<
      Exchange & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Exchange__factory {
    return super.connect(runner) as Exchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeInterface {
    return new Interface(_abi) as ExchangeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Exchange {
    return new Contract(address, _abi, runner) as unknown as Exchange;
  }
}
